// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider     = "postgresql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }
datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl    = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
  SALES
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  phone          String?
  bio            String?   @db.Text
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(SALES)

  accounts Account[]
  sessions Session[]
  // listings Listing[]
  // reservations Reservation[]
  orders   Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Product {
  id          String      @id @default(uuid())
  title       String
  price       Decimal
  description String?     @db.Text
  isArchived  Boolean     @default(false)
  image       String?
  orderItems  OrderItem[] // Relation to Order model
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id            String      @id @default(uuid())
  orderItems    OrderItem[] // Relation to OrderItem model
  isPaid        Boolean     @default(false)
  discount      Decimal     @default(0)
  email         String?
  name          String?
  phone         String?     @default("")
  address       String?     @default("")
  state         String?
  city          String?
  zipCode       String?
  accountNumber String?
  transId       String?
  accountType   String?
  authCode      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String // Foreign Key to User(Sales)
  user          User        @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
